Version Control, Git and GitHub
What is a version control system? 
It is a system that allows one to keep track of changes to
your documents. This makes it easy for you to recover older
versions of the document if you make a mistake and it 
makes collaboration with others much easier. 

Git is a free and open source software distributed under the
GNU General Public License. It is a distributed version 
control system. Which means that users anywhere in the 
world can have a copy of your project in their computer. 
When they have made changes, they can sync their version
to a remote server to share it with you. Git isn't the only
version control system out there but the distribution system
is one of the main reasons it's become the most common 
version control systems available. 

Short Glossary of terms: 
 . SSH Protocol 
    - A method for secure remote login from one computer
      another. 
 . Repository
    - The folders of your project that are setup for
      version control
 . Fork
    - A copy of a repository. 
 . Pull Request
    - The process you use to request that someone reviews
      and approves your changes before they become final. 
 . Working Directory
    - A Directory on your file system, including its files
      and subdirectories, that is associated with a git
      repository. 

Basic Git Commands
 . git init
    When starting out with a new repo, you only need to 
    create it once: either locally and then push to GitHub,
    or by cloning and existing repo using the command "git
    init"
 . git add
    Git add moves changes form the working directory to 
    the staging area. 
 . git status
    git status allows you to see the state of your working
    directory and the staged snapshot of your changes. 
 . git commit 
    git commit takes your staged snapshot of changes and
    commits them to the project. 
 . git reset
    git reset undoes the changes that you've made to the
    files in your working directory.
 . git log
    git log enables you to browse previous changes to a
    project. 
 . git branch
    git branch lets you create an isolated environment
    within your repo to make changes. 
 . git checkout
    git checkout lets you see and change existing branches
 . git merge
    git merge lets you put everything back together again.
